<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <!-- 
  	命名空间（Namespaces）在之前版本的 MyBatis 中是可选的，这样容易引起混淆因此毫无益处。
  	现在命名空间则是必须的，且意于简单地用更长的完全限定名来隔离语句。

	命名空间使得你所见到的接口绑定成为可能，尽管你觉得这些东西未必用得上，你还是应该遵循这里的规定以防哪天你改变了主意。
	出于长远考虑，使用命名空间，并将它置于合适的 Java 包命名空间之下，你将拥有一份更加整洁的代码并提高了 MyBatis 的可用性。

	命名解析：为了减少输入量，MyBatis 对所有的命名配置元素（包括语句，结果映射，缓存等）使用了如下的命名解析规则。

  	  完全限定名（比如“com.mypackage.MyMapper.selectAllThings”）将被直接查找并且找到即用。
              短名称（比如“selectAllThings”）如果全局唯一也可以作为一个单独的引用。
              如果不唯一，有两个或两个以上的相同名称（比如“com.foo.selectAllThings ”和“com.bar.selectAllThings”），那么使用时就会收到错误报告说短名称是不唯一的，这种情况下就必须使用完全限定名。
  	
   -->
   
   <!-- 
   Mapper XML 文件:

		MyBatis 的真正强大在于它的映射语句，也是它的魔力所在。
		由于它的异常强大，映射器的 XML 文件就显得相对简单。
		如果拿它跟具有相同功能的 JDBC 代码进行对比，你会立即发现省掉了将近 95% 的代码。
		MyBatis 就是针对 SQL 构建的，并且比普通的方法做的更好。
		
		SQL 映射文件有很少的几个顶级元素（按照它们应该被定义的顺序）：
		
		    cache – 给定命名空间的缓存配置。
		    cache-ref – 其他命名空间缓存配置的引用。
		    resultMap – 是最复杂也是最强大的元素，用来描述如何从数据库结果集中来加载对象。
		    parameterMap – 已废弃！老式风格的参数映射。内联参数是首选,这个元素可能在将来被移除，这里不会记录。
		    sql – 可被其他语句引用的可重用语句块。
		    insert – 映射插入语句
		    update – 映射更新语句
		    delete – 映射删除语句
		    select – 映射查询语句
   
    -->
<mapper namespace="com.robinliew.mapper.BlogMapper">
  <!-- 
	在一个 XML 映射文件中，你想定义多少个映射语句都是可以的，这样下来，XML 头部和文档类型声明占去的部分就显得微不足道了。
	文件的剩余部分具有很好的自解释性。在命名空间“com.robinliew.mapper.BlogMapper”中定义了一个名为“selectBlog”的映射语句，
	这样它就允许你使用指定的完全限定名“com.robinliew.mapper.BlogMapper.selectBlog”来调用映射语句
  -->
  <select id="selectBlog" resultType="Blog">
    select * from Blog where id = #{id}
  </select>
  
  <!-- 
  select:

	查询语句是 MyBatis 中最常用的元素之一，光能把数据存到数据库中价值并不大，如果还能重新取出来才有用，多数应用也都是查询比修改要频繁。
	对每个插入、更新或删除操作，通常对应多个查询操作。这是 MyBatis 的基本原则之一，也是将焦点和努力放到查询和结果映射的原因。
	简单查询的 select 元素是非常简单的。
	
	这个语句被称作 selectPerson，接受一个 int（或 Integer）类型的参数，并返回一个 HashMap 类型的对象，其中的键是列名，值便是结果行中的对应值。

	注意参数符号：#{id}
	这就告诉 MyBatis 创建一个预处理语句参数，通过 JDBC，这样的一个参数在 SQL 中会由一个“?”来标识，
	并被传递到一个新的预处理语句中，就像这样：
	
	// Similar JDBC code, NOT MyBatis…
	String selectPerson = "SELECT * FROM PERSON WHERE ID=?";
	PreparedStatement ps = conn.prepareStatement(selectPerson);
	ps.setInt(1,id);
	
	当然，这需要很多单独的 JDBC 的代码来提取结果并将它们映射到对象实例中，这就是 MyBatis 节省你时间的地方。
	我们需要深入了解参数和结果映射，细节部分我们下面来了解。
	select 元素有很多属性允许你配置，来决定每条语句的作用细节。
	
	<select
	  id="selectPerson"
	  parameterType="int"
	  parameterMap="deprecated"
	  resultType="hashmap"
	  resultMap="personResultMap"
	  flushCache="false"
	  useCache="true"
	  timeout="10000"
	  fetchSize="256"
	  statementType="PREPARED"
	  resultSetType="FORWARD_ONLY">
   -->
  <select id="selectPerson" parameterType="int" resultType="hashmap">
	 SELECT * FROM PERSON WHERE ID = #{id}
  </select>
  
  <!-- 
  insert, update 和 delete:

	数据变更语句 insert，update 和 delete 的实现非常接近： 
	
	Insert语句：
	如前所述，插入语句的配置规则更加丰富，在插入语句里面有一些额外的属性和子元素用来处理主键的生成，而且有多种生成方式。

	首先，如果你的数据库支持自动生成主键的字段（比如 MySQL 和 SQL Server），那么你可以设置 useGeneratedKeys=”true”，然后再把 keyProperty 设置到目标属性上就OK了。
	例如，如果上面的 Author 表已经对 id 使用了自动生成的列类型，那么语句可以修改为:
	
	<insert id="insertAuthor" useGeneratedKeys="true"
	    keyProperty="id">
	  insert into Author (username,password,email,bio)
	  values (#{username},#{password},#{email},#{bio})
	</insert>
	
	 如果你的数据库还支持多行插入, 你也可以传入一个Authors数组或集合，并返回自动生成的主键。

	<insert id="insertAuthor" useGeneratedKeys="true"
	    keyProperty="id">
	  insert into Author (username, password, email, bio) values
	  <foreach item="item" collection="list" separator=",">
	    (#{item.username}, #{item.password}, #{item.email}, #{item.bio})
	  </foreach>
	</insert>
	
	对于不支持自动生成类型的数据库或可能不支持自动生成主键的 JDBC 驱动，MyBatis 有另外一种方法来生成主键。
	这里有一个简单（甚至很傻）的示例，它可以生成一个随机 ID（你最好不要这么做，但这里展示了 MyBatis 处理问题的灵活性及其所关心的广度）：

	<insert id="insertAuthor">
	  <selectKey keyProperty="id" resultType="int" order="BEFORE">
	    select CAST(RANDOM()*1000000 as INTEGER) a from SYSIBM.SYSDUMMY1
	  </selectKey>
	  insert into Author
	    (id, username, password, email,bio, favourite_section)
	  values
	    (#{id}, #{username}, #{password}, #{email}, #{bio}, #{favouriteSection,jdbcType=VARCHAR})
	</insert>

	在上面的示例中，selectKey 元素将会首先运行，Author 的 id 会被设置，然后插入语句会被调用。这给你了一个和数据库中来处理自动生成的主键类似的行为，避免了使 Java 代码变得复杂。
	
	selectKey 元素描述如下：
	
	<selectKey
	  keyProperty="id"
	  resultType="int"
	  order="BEFORE"
	  statementType="PREPARED">
	
   -->
  <insert id="insertAuthor">
	  insert into Author (id,username,password,email,bio)
	  values (#{id},#{username},#{password},#{email},#{bio})
  </insert>
	
  <update id="updateAuthor">
	  update Author set
	    username = #{username},
	    password = #{password},
	    email = #{email},
	    bio = #{bio}
	  where id = #{id}
  </update>
	
  <delete id="deleteAuthor">
	  delete from Author where id = #{id}
  </delete>
  
</mapper>